//          NODO DE CONTROL LINEAL
//Este nodo recibe posiciones angulares deseadas (roll, pitch y yaw), velocidades angulares deseadas orientacion del dorne y velocidad angulare real del drone. Con ello calcula los torques necsarios para la dinamico.

#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/Vector3.h"
#include "std_msgs/Float32.h"
#include <cmath>
#include <eigen3/Eigen/Dense>

//Declaracion de la variable de la masas
const double m = 2.0;

//Declaracion de variables de error
double x_err, y_err, z_err,yaw_err, x_punto_err,y_punto_err,z_punto_err,yaw_punto_err;

//Declaracionn de variables de las posiciones deseadas
double x_des,y_des,z_des, yaw_des;

//Declaracionn de variables de velocidades deseadas
double x_punto_des, y_punto_des, z_punto_des, yaw_punto_des;

//Declaracioin de variables de posicion reales
double x_real,y_real,z_real,roll_real,pitch_real,yaw_real;

//Declaracion de variables de velocidad real
double x_punto_real, y_punto_real, z_punto_real, yaw_punto_real;

//Declaracion de las variables de control
double x_control,y_control,z_control;

//Variables para evitar errores
double roll_prev;
double pitch_prev;

//Declaracion de las constantes de control
double kpx = 0.05;
double kpy = 0.05;
double kpz = 0.0001;
double kdx = 0.5;
double kdy = 0.5;
double kdz = 0.5;

double z_dos = 0;
double g = 9.81;

//Declaracion de las variables de salida
double roll_des,pitch_des,thrust;

// Funcion callback para mensajes del topico pos_des
void posDesCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
    x_des = msg -> linear.x;
    y_des = msg -> linear.y;
    z_des = msg -> linear.z;
    yaw_des = msg -> angular.z;
}

// Funcion callback para mensajes del topico vels_des
void velsDesCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
    x_punto_des = msg -> linear.x;
    y_punto_des = msg -> linear.y;
    z_punto_des = msg -> linear.z;
    yaw_punto_des = msg -> angular.z;
}

// Funcion callback para los valores de posicion reales
void posRealCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
    x_real = msg -> linear.x;
    y_real = msg -> linear.y;
    z_real = msg -> linear.z;
    roll_real = msg -> angular.x;
    pitch_real = msg -> angular.y;
    yaw_real = msg -> angular.z;
}

// Funcion callback para los valores de velocidad real
void velRealCallback(const geometry_msgs::Twist::ConstPtr& msg)
{
    x_punto_real = msg -> linear.x;
    y_punto_real = msg -> linear.y;
    z_punto_real = msg -> linear.z;
    yaw_punto_real = msg -> angular.z;
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "linear_control");
    ros::NodeHandle nh2;

    // Subscripcion al topico de posicion angular deseada 
    ros::Subscriber pos_sub = nh2.subscribe("/pos_des", 100, posDesCallback);

    // Subscripcion al topico de velocidad angular deseada
    ros::Subscriber vels_sub = nh2.subscribe("/vels_des", 100, velsDesCallback);

    // Subscripcion al topico de posiciones reales
    ros::Subscriber pos_real_sub = nh2.subscribe("/pos_real", 100, posRealCallback);
    
    // Subscripcion al topico de velocidades reales
    ros::Subscriber vels_real_sub = nh2.subscribe("/vels_real", 100, velRealCallback);

    // Publicacion del valor del thrust al topico "thrust"
    ros::Publisher thrust_pub = nh2.advertise<std_msgs::Float32>("/thrust", 100);

    // Publicacion de Pitch y Roll deseados
    ros::Publisher angulos_pub = nh2.advertise<geometry_msgs::Twist>("/ang_des", 100);

    std_msgs::Float32 propulsion;
    geometry_msgs::Twist angulos;

    ros::Rate loop_rate(100);
    double t = 0;
    while(ros::ok){
        // Calculos del error de los parametros de posicion y velocidad
        x_err = x_real-x_des; //X
        y_err = y_real-y_des; //Y
        z_err = z_real-z_des; //Z

        x_punto_err = x_punto_real - x_punto_des; // X punto
        y_punto_err = y_punto_real - y_punto_des; // Y punto
        z_punto_err = z_punto_real - z_punto_des; // Z punto

        //Calaculos del control 
        x_control = -kpx*x_err - kdx*x_punto_err; //Control en X
        y_control = -kpy*y_err - kdy*y_punto_err; //Control en Y
        z_control = -kpz*z_err - kdz*z_punto_err; //Control en Z

        //THRUST
        thrust = (m/(cos(roll_real)*cos(pitch_real)))*(z_dos - g + z_control);
        if(thrust>0)
        {
            thrust = 0;
        }
        else if(thrust < -30)
        {
            thrust = -30;
        }
        propulsion.data = thrust;
        thrust_pub.publish(propulsion);

        //ROLL DESEADA
        roll_prev = (m/thrust)*(sin(yaw_des)*x_control - cos(yaw_des)*y_control);
        if (roll_prev>1)
        {
            roll_prev=1;
        }
        else if(roll_prev<-1)
        {
            roll_prev=-1;
        }
        roll_des = asin(roll_prev);
        angulos.angular.x = roll_des;

        //PITCH DESEADA
        pitch_prev = ((m/thrust)*x_control - sin(yaw_des)*sin(roll_des))/cos(yaw_des)*cos(roll_des);
        if (pitch_prev>1)
        {
            pitch_prev = 1;
        }
        else if(pitch_prev<-1)
        {
            pitch_prev = -1;
        }
        pitch_des = asin(pitch_prev);
        angulos.angular.y = pitch_des;
        angulos_pub.publish(angulos);

    ros::spinOnce();
    loop_rate.sleep();
    }

  return 0;
}
